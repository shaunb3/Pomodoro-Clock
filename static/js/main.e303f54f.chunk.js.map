{"version":3,"sources":["play.svg","pause.svg","reset.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","sessionInterval","App","props","state","breakLength","sessionLength","sessionTimeRemaining","sessionActive","breakActive","currentDisplay","ringColor","convertTime","input","seconds","minutes","Math","floor","playPause","setState","setInterval","audio","current","play","prevState","clearInterval","reset","pause","currentTime","handleClick","event","target","id","React","createRef","prevProps","this","className","style","backgroundColor","onClick","src","pauseIcon","playIcon","resetIcon","ref","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e303f54f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.ab742698.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause.7d76ade1.svg\";","module.exports = __webpack_public_path__ + \"static/media/reset.05bc37d1.svg\";","import React,{Component} from 'react';\r\n\r\nimport './App.css';\r\n// import './play_pause.svg'\r\nimport playIcon from './play.svg'\r\nimport pauseIcon from './pause.svg'\r\nimport resetIcon from './reset.svg'\r\n\r\nlet sessionInterval\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.audio = React.createRef();\r\n  }\r\n   \r\n\r\n  state={\r\n    breakLength:5,\r\n    sessionLength:25,\r\n    sessionTimeRemaining: 25*60,\r\n    sessionActive:false,\r\n    breakActive:false,\r\n    currentDisplay:\"Session\",\r\n    ringColor:'#E48F2E'\r\n\r\n  }\r\n\r\n  convertTime=(input)=>{\r\n    let seconds = input % 60\r\n    let minutes = Math.floor(input / 60)\r\n    \r\n    seconds = seconds < 10 ? (\"0\"+seconds): seconds\r\n    minutes = minutes < 10 ? (\"0\"+minutes): minutes\r\n\r\n    return `${minutes}:${seconds}`\r\n    \r\n  }\r\n\r\n\r\nplayPause=()=>{\r\n  \r\n\r\n\r\n  if(this.state.sessionActive === false){\r\n      \r\n      this.setState({ringColor: '#E48F2E'})\r\n\r\n      sessionInterval = setInterval(()=>{\r\n      \r\n\r\n      if(this.state.sessionTimeRemaining===0){\r\n        this.audio.current.play()\r\n        \r\n        this.state.currentDisplay===\"Session\" ?\r\n          this.setState({\r\n            sessionTimeRemaining:this.state.breakLength*60 ,currentDisplay:\"Break\"})\r\n            :this.setState({\r\n            sessionTimeRemaining:this.state.sessionLength*60 ,currentDisplay:\"Session\"})\r\n      }\r\n      else{\r\n        this.setState((prevState) => {return    {sessionTimeRemaining:prevState.sessionTimeRemaining -1}})\r\n      }\r\n\r\n     \r\n\r\n\r\n    },1000)\r\n    this.setState({sessionActive:true, ringColor:'green'})\r\n\r\n   \r\n  }\r\n  else{\r\n    clearInterval(sessionInterval)    \r\n    this.setState({sessionActive:false, ringColor: '#E48F2E'})\r\n    \r\n\r\n  }\r\n\r\n  \r\n  \r\n}\r\n\r\nreset =()=>{\r\n  clearInterval(sessionInterval)\r\n  \r\n  this.setState({\r\n    sessionTimeRemaining: 25*60,\r\n    breakLength:5, \r\n    sessionLength:25,\r\n    breakActive:false,\r\n    sessionActive:false,\r\n    currentDisplay:\"Session\"\r\n    })\r\n    this.audio.current.pause()\r\n    this.audio.current.currentTime = 0\r\n}\r\n\r\n    \r\n\r\n  handleClick=(event)=>{\r\n   \r\n\r\n \r\n    if(event.target.id ===\"break-increment\"){\r\n      if(this.state.breakLength<60){\r\n      this.setState((prevState)=> {return{breakLength: prevState.breakLength + 1}})\r\n      }\r\n    }\r\n\r\n    else if(event.target.id ===\"break-decrement\"){\r\n      if(this.state.breakLength>1){\r\n        this.setState((prevState)=> {return{breakLength: prevState.breakLength - 1}})\r\n      }\r\n    }\r\n\r\n    else if(event.target.id ===\"session-increment\"){\r\n      if(this.state.sessionLength<60){\r\n      this.setState((prevState)=> {return{sessionLength: prevState.sessionLength + 1}})\r\n      }\r\n    }\r\n\r\n    else if(event.target.id ===\"session-decrement\"){\r\n      if(this.state.sessionLength>1){\r\n        this.setState((prevState)=> {return{sessionLength: prevState.sessionLength - 1}})\r\n      }\r\n    }\r\n    \r\n\r\n  }\r\n\r\ncomponentDidUpdate(prevProps,prevState) {\r\n  // Typical usage (don't forget to compare props):\r\n  if (this.state.sessionLength !== prevState.sessionLength) {\r\n    this.setState({sessionTimeRemaining:this.state.sessionLength*60})\r\n  }\r\n\r\n\r\n} //needs prevProps even not using, else infinite loop\r\n\r\n\r\nrender(){\r\n\r\n    return (\r\n      \r\n    <div className=\"App\">\r\n      <div className=\"timer-body\">\r\n      \r\n        <div className=\"display\">\r\n            <div className=\"digits\">\r\n            <div id=\"timer-label\">{this.state.currentDisplay}</div>\r\n                <div id=\"time-left\">{this.convertTime(this.state.sessionTimeRemaining)}</div>\r\n                <div className=\"secondary-display\">\r\n                  <div id=\"break-length\">{this.state.breakLength}</div>\r\n                  <div id=\"session-length\">{this.state.sessionLength}</div>\r\n                </div>\r\n            </div>\r\n                  <div className=\"buttons-con\">\r\n                      <div className=\"btn-ring\" style={{backgroundColor:`${this.state.ringColor}`}}>\r\n                        <div className=\"button\" id=\"start_stop\" onClick={this.playPause}>\r\n                        {this.state.sessionActive? <img className=\"icon pause-icon\" src={pauseIcon}/> : <img className=\"icon\" src={playIcon}/>}</div>\r\n                      </div>\r\n\r\n                      <div>\r\n                        <div className=\"button\" id=\"reset\" onClick={this.reset}><img className=\"icon\" src={resetIcon}/></div>\r\n                      </div>\r\n\r\n                  </div>\r\n              \r\n            <audio\r\n            ref={this.audio}\r\n            id=\"beep\"\r\n            src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"/>\r\n            \r\n\r\n        </div>\r\n\r\n          <div className=\"secondary-buttons\">\r\n              <div className=\"break\">\r\n                <h3 id=\"break-label\">Break length</h3>\r\n                  <div className=\"input-btn-con\">\r\n                    <div className=\"input-btn\" onClick={this.handleClick} id=\"break-increment\">+</div>\r\n                    <div className=\"input-btn\" onClick={this.handleClick} id=\"break-decrement\" disabled={this.state.breakLength===1 ? true: false}>-</div>\r\n                  </div>\r\n              </div>\r\n\r\n              <div className=\"session\">\r\n              <h3 id=\"session-label\">Session length</h3>\r\n                <div className=\"input-btn-con\">\r\n                  <div className=\"input-btn\" id=\"session-increment\"  onClick={this.handleClick}>+</div>\r\n                  <div className=\"input-btn\" id=\"session-decrement\" onClick={this.handleClick} disabled={this.state.sessionLength===1 ? true: false}>-</div>\r\n                </div>\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n      \r\n\r\n\r\n\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}